// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createAPIToken = `-- name: CreateAPIToken :execresult

INSERT INTO api_tokens (id, user_id, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, data
`

type CreateAPITokenParams struct {
	ID        int64
	UserID    int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// API Tokens
func (q *Queries) CreateAPIToken(ctx context.Context, arg CreateAPITokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAPIToken,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Data,
	)
}

const createCard = `-- name: CreateCard :execresult

INSERT INTO cards (id, type, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, type, data
`

type CreateCardParams struct {
	ID        int64
	Type      string
	CreatedAt time.Time
	Data      json.RawMessage
}

// Cards
func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCard,
		arg.ID,
		arg.Type,
		arg.CreatedAt,
		arg.Data,
	)
}

const createChatSession = `-- name: CreateChatSession :execresult

INSERT INTO chat_sessions (id, user_id, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, data
`

type CreateChatSessionParams struct {
	ID        int64
	UserID    int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// Chat Sessions
func (q *Queries) CreateChatSession(ctx context.Context, arg CreateChatSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createChatSession,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Data,
	)
}

const createChatSessionItem = `-- name: CreateChatSessionItem :execresult

INSERT INTO chat_session_items (id, user_id, created_at, type, session_id, data)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, session_id, created_at, updated_at, type, data
`

type CreateChatSessionItemParams struct {
	ID        int64
	UserID    int64
	CreatedAt time.Time
	Type      string
	SessionID int64
	Data      json.RawMessage
}

// Chat Session Items
func (q *Queries) CreateChatSessionItem(ctx context.Context, arg CreateChatSessionItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createChatSessionItem,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Type,
		arg.SessionID,
		arg.Data,
	)
}

const createDeck = `-- name: CreateDeck :execresult

INSERT INTO decks (id, user_id, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, data
`

type CreateDeckParams struct {
	ID        int64
	UserID    int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// Decks
func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDeck,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Data,
	)
}

const createGameState = `-- name: CreateGameState :execresult

INSERT INTO game_states (id, created_at, data)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, data
`

type CreateGameStateParams struct {
	ID        int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// Game States
func (q *Queries) CreateGameState(ctx context.Context, arg CreateGameStateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGameState, arg.ID, arg.CreatedAt, arg.Data)
}

const createGameStateVersion = `-- name: CreateGameStateVersion :execresult

INSERT INTO game_state_versions (id, game_state_id, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, game_state_id, created_at, updated_at, data
`

type CreateGameStateVersionParams struct {
	ID          int64
	GameStateID int64
	CreatedAt   time.Time
	Data        json.RawMessage
}

// Game State Versions
func (q *Queries) CreateGameStateVersion(ctx context.Context, arg CreateGameStateVersionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGameStateVersion,
		arg.ID,
		arg.GameStateID,
		arg.CreatedAt,
		arg.Data,
	)
}

const createIntegration = `-- name: CreateIntegration :execresult

INSERT INTO integrations (id, type, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, type, created_at, data
`

type CreateIntegrationParams struct {
	ID        int64
	Type      string
	CreatedAt time.Time
	Data      json.RawMessage
}

// Integrations
func (q *Queries) CreateIntegration(ctx context.Context, arg CreateIntegrationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createIntegration,
		arg.ID,
		arg.Type,
		arg.CreatedAt,
		arg.Data,
	)
}

const createRateLimit = `-- name: CreateRateLimit :execresult

INSERT INTO rate_limits (id, user_id, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, data
`

type CreateRateLimitParams struct {
	ID        int64
	UserID    int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// Rate Limits
func (q *Queries) CreateRateLimit(ctx context.Context, arg CreateRateLimitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRateLimit,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Data,
	)
}

const createSecret = `-- name: CreateSecret :execresult

INSERT INTO secrets (id, user_id, created_at, data)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, created_at, data
`

type CreateSecretParams struct {
	ID        int64
	UserID    int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// Secrets
func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSecret,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.Data,
	)
}

const createUser = `-- name: CreateUser :execresult

INSERT INTO users (id, created_at, data)
VALUES ($1, $2, $3)
RETURNING id, created_at, data
`

type CreateUserParams struct {
	ID        int64
	CreatedAt time.Time
	Data      json.RawMessage
}

// Users
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.ID, arg.CreatedAt, arg.Data)
}

const deleteAPIToken = `-- name: DeleteAPIToken :execresult
DELETE FROM api_tokens
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type DeleteAPITokenParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteAPIToken(ctx context.Context, arg DeleteAPITokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAPIToken, arg.ID, arg.UserID)
}

const deleteCard = `-- name: DeleteCard :execresult
DELETE FROM cards
WHERE id = $1
RETURNING id, created_at, updated_at, type, data
`

func (q *Queries) DeleteCard(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCard, id)
}

const deleteChatSession = `-- name: DeleteChatSession :execresult
DELETE FROM chat_sessions
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type DeleteChatSessionParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteChatSession(ctx context.Context, arg DeleteChatSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChatSession, arg.ID, arg.UserID)
}

const deleteChatSessionItem = `-- name: DeleteChatSessionItem :execresult
DELETE FROM chat_session_items
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, session_id, created_at, updated_at, type, data
`

type DeleteChatSessionItemParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteChatSessionItem(ctx context.Context, arg DeleteChatSessionItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChatSessionItem, arg.ID, arg.UserID)
}

const deleteChatSessionItemsBySessionID = `-- name: DeleteChatSessionItemsBySessionID :exec
DELETE FROM chat_session_items
WHERE session_id = $1 AND user_id = $2
`

type DeleteChatSessionItemsBySessionIDParams struct {
	SessionID int64
	UserID    int64
}

func (q *Queries) DeleteChatSessionItemsBySessionID(ctx context.Context, arg DeleteChatSessionItemsBySessionIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteChatSessionItemsBySessionID, arg.SessionID, arg.UserID)
	return err
}

const deleteDeck = `-- name: DeleteDeck :execresult
DELETE FROM decks
WHERE id = $1 AND user_id = $2
`

type DeleteDeckParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteDeck(ctx context.Context, arg DeleteDeckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteDeck, arg.ID, arg.UserID)
}

const deleteGameState = `-- name: DeleteGameState :execresult
DELETE FROM game_states
WHERE id = $1
RETURNING id, created_at, updated_at, data
`

func (q *Queries) DeleteGameState(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteGameState, id)
}

const deleteIntegration = `-- name: DeleteIntegration :execresult
DELETE FROM integrations
WHERE id = $1
RETURNING id, type, created_at, updated_at, data
`

func (q *Queries) DeleteIntegration(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteIntegration, id)
}

const deleteRateLimit = `-- name: DeleteRateLimit :execresult
DELETE FROM rate_limits
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type DeleteRateLimitParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteRateLimit(ctx context.Context, arg DeleteRateLimitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRateLimit, arg.ID, arg.UserID)
}

const deleteSecret = `-- name: DeleteSecret :execresult
DELETE FROM secrets
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type DeleteSecretParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteSecret(ctx context.Context, arg DeleteSecretParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSecret, arg.ID, arg.UserID)
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE id = $1
RETURNING id, created_at, updated_at, data
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getAPIToken = `-- name: GetAPIToken :one
SELECT id, user_id, created_at, updated_at, data
FROM api_tokens
WHERE id = $1 AND user_id = $2
`

type GetAPITokenParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetAPIToken(ctx context.Context, arg GetAPITokenParams) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, getAPIToken, arg.ID, arg.UserID)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getAllAPITokens = `-- name: GetAllAPITokens :many
SELECT id, user_id, created_at, updated_at, data
FROM api_tokens
ORDER BY created_at DESC
`

func (q *Queries) GetAllAPITokens(ctx context.Context) ([]ApiToken, error) {
	rows, err := q.db.QueryContext(ctx, getAllAPITokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiToken
	for rows.Next() {
		var i ApiToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCards = `-- name: GetAllCards :many
SELECT id, created_at, updated_at, type, data
FROM cards
ORDER BY created_at DESC
`

func (q *Queries) GetAllCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getAllCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChatSessionItems = `-- name: GetAllChatSessionItems :many
SELECT id, user_id, session_id, created_at, updated_at, type, data
FROM chat_session_items
ORDER BY created_at DESC
`

func (q *Queries) GetAllChatSessionItems(ctx context.Context) ([]ChatSessionItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllChatSessionItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatSessionItem
	for rows.Next() {
		var i ChatSessionItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChatSessions = `-- name: GetAllChatSessions :many
SELECT id, user_id, created_at, updated_at, data
FROM chat_sessions
ORDER BY created_at DESC
`

func (q *Queries) GetAllChatSessions(ctx context.Context) ([]ChatSession, error) {
	rows, err := q.db.QueryContext(ctx, getAllChatSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatSession
	for rows.Next() {
		var i ChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDecks = `-- name: GetAllDecks :many
SELECT id, user_id, created_at, updated_at, data
FROM decks
ORDER BY created_at DESC
`

func (q *Queries) GetAllDecks(ctx context.Context) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, getAllDecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGameStateVersions = `-- name: GetAllGameStateVersions :many
SELECT id, game_state_id, created_at, updated_at, data
FROM game_state_versions
ORDER BY created_at DESC
`

func (q *Queries) GetAllGameStateVersions(ctx context.Context) ([]GameStateVersion, error) {
	rows, err := q.db.QueryContext(ctx, getAllGameStateVersions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameStateVersion
	for rows.Next() {
		var i GameStateVersion
		if err := rows.Scan(
			&i.ID,
			&i.GameStateID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGameStates = `-- name: GetAllGameStates :many
SELECT id, created_at, updated_at, data
FROM game_states
ORDER BY created_at DESC
`

func (q *Queries) GetAllGameStates(ctx context.Context) ([]GameState, error) {
	rows, err := q.db.QueryContext(ctx, getAllGameStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameState
	for rows.Next() {
		var i GameState
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIntegrations = `-- name: GetAllIntegrations :many
SELECT id, type, created_at, updated_at, data
FROM integrations
ORDER BY created_at DESC
`

func (q *Queries) GetAllIntegrations(ctx context.Context) ([]Integration, error) {
	rows, err := q.db.QueryContext(ctx, getAllIntegrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Integration
	for rows.Next() {
		var i Integration
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRateLimits = `-- name: GetAllRateLimits :many
SELECT id, user_id, created_at, updated_at, data
FROM rate_limits
ORDER BY created_at DESC
`

func (q *Queries) GetAllRateLimits(ctx context.Context) ([]RateLimit, error) {
	rows, err := q.db.QueryContext(ctx, getAllRateLimits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RateLimit
	for rows.Next() {
		var i RateLimit
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSecrets = `-- name: GetAllSecrets :many
SELECT id, user_id, created_at, updated_at, data
FROM secrets
ORDER BY created_at DESC
`

func (q *Queries) GetAllSecrets(ctx context.Context) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, getAllSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, data
FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCard = `-- name: GetCard :one
SELECT id, created_at, updated_at, type, data
FROM cards
WHERE id = $1
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Data,
	)
	return i, err
}

const getChatSession = `-- name: GetChatSession :one
SELECT id, user_id, created_at, updated_at, data
FROM chat_sessions
WHERE id = $1 AND user_id = $2
`

type GetChatSessionParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetChatSession(ctx context.Context, arg GetChatSessionParams) (ChatSession, error) {
	row := q.db.QueryRowContext(ctx, getChatSession, arg.ID, arg.UserID)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getChatSessionItem = `-- name: GetChatSessionItem :one
SELECT id, user_id, session_id, created_at, updated_at, type, data
FROM chat_session_items
WHERE id = $1 AND user_id = $2
`

type GetChatSessionItemParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetChatSessionItem(ctx context.Context, arg GetChatSessionItemParams) (ChatSessionItem, error) {
	row := q.db.QueryRowContext(ctx, getChatSessionItem, arg.ID, arg.UserID)
	var i ChatSessionItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Data,
	)
	return i, err
}

const getChatSessionItemsBySessionID = `-- name: GetChatSessionItemsBySessionID :many
SELECT id, user_id, session_id, created_at, updated_at, type, data
FROM chat_session_items
WHERE session_id = $1 AND user_id = $2
ORDER BY created_at DESC
`

type GetChatSessionItemsBySessionIDParams struct {
	SessionID int64
	UserID    int64
}

func (q *Queries) GetChatSessionItemsBySessionID(ctx context.Context, arg GetChatSessionItemsBySessionIDParams) ([]ChatSessionItem, error) {
	rows, err := q.db.QueryContext(ctx, getChatSessionItemsBySessionID, arg.SessionID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatSessionItem
	for rows.Next() {
		var i ChatSessionItem
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatSessionsByUserID = `-- name: GetChatSessionsByUserID :many
SELECT id, user_id, created_at, updated_at, data
FROM chat_sessions
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetChatSessionsByUserID(ctx context.Context, userID int64) ([]ChatSession, error) {
	rows, err := q.db.QueryContext(ctx, getChatSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatSession
	for rows.Next() {
		var i ChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeck = `-- name: GetDeck :one
SELECT id, user_id, created_at, updated_at, data
FROM decks
WHERE id = $1 AND user_id = $2
`

type GetDeckParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetDeck(ctx context.Context, arg GetDeckParams) (Deck, error) {
	row := q.db.QueryRowContext(ctx, getDeck, arg.ID, arg.UserID)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getGameState = `-- name: GetGameState :one
SELECT id, created_at, updated_at, data
FROM game_states
WHERE id = $1
`

func (q *Queries) GetGameState(ctx context.Context, id int64) (GameState, error) {
	row := q.db.QueryRowContext(ctx, getGameState, id)
	var i GameState
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getGameStateVersion = `-- name: GetGameStateVersion :one
SELECT id, game_state_id, created_at, updated_at, data
FROM game_state_versions
WHERE id = $1
`

func (q *Queries) GetGameStateVersion(ctx context.Context, id int64) (GameStateVersion, error) {
	row := q.db.QueryRowContext(ctx, getGameStateVersion, id)
	var i GameStateVersion
	err := row.Scan(
		&i.ID,
		&i.GameStateID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getGameStateVersionsByGameStateID = `-- name: GetGameStateVersionsByGameStateID :many
SELECT id, game_state_id, created_at, updated_at, data
FROM game_state_versions
WHERE game_state_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetGameStateVersionsByGameStateID(ctx context.Context, gameStateID int64) ([]GameStateVersion, error) {
	rows, err := q.db.QueryContext(ctx, getGameStateVersionsByGameStateID, gameStateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameStateVersion
	for rows.Next() {
		var i GameStateVersion
		if err := rows.Scan(
			&i.ID,
			&i.GameStateID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIntegration = `-- name: GetIntegration :one
SELECT id, type, created_at, updated_at, data
FROM integrations
WHERE id = $1
`

func (q *Queries) GetIntegration(ctx context.Context, id int64) (Integration, error) {
	row := q.db.QueryRowContext(ctx, getIntegration, id)
	var i Integration
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getLatestGameStateVersionByGameStateID = `-- name: GetLatestGameStateVersionByGameStateID :one
SELECT id, game_state_id, created_at, updated_at, data
FROM game_state_versions
WHERE game_state_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestGameStateVersionByGameStateID(ctx context.Context, gameStateID int64) (GameStateVersion, error) {
	row := q.db.QueryRowContext(ctx, getLatestGameStateVersionByGameStateID, gameStateID)
	var i GameStateVersion
	err := row.Scan(
		&i.ID,
		&i.GameStateID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getRateLimit = `-- name: GetRateLimit :one
SELECT id, user_id, created_at, updated_at, data
FROM rate_limits
WHERE id = $1 AND user_id = $2
`

type GetRateLimitParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetRateLimit(ctx context.Context, arg GetRateLimitParams) (RateLimit, error) {
	row := q.db.QueryRowContext(ctx, getRateLimit, arg.ID, arg.UserID)
	var i RateLimit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getSecret = `-- name: GetSecret :one
SELECT id, user_id, created_at, updated_at, data
FROM secrets
WHERE id = $1 AND user_id = $2
`

type GetSecretParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetSecret(ctx context.Context, arg GetSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecret, arg.ID, arg.UserID)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, data
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Data,
	)
	return i, err
}

const updateAPIToken = `-- name: UpdateAPIToken :execresult
UPDATE api_tokens
SET updated_at = $3, data = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type UpdateAPITokenParams struct {
	ID        int64
	UserID    int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateAPIToken(ctx context.Context, arg UpdateAPITokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAPIToken,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Data,
	)
}

const updateCard = `-- name: UpdateCard :execresult
UPDATE cards
SET updated_at = $2, type = $3, data = $4
WHERE id = $1
RETURNING id, created_at, updated_at, type, data
`

type UpdateCardParams struct {
	ID        int64
	UpdatedAt sql.NullTime
	Type      string
	Data      json.RawMessage
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCard,
		arg.ID,
		arg.UpdatedAt,
		arg.Type,
		arg.Data,
	)
}

const updateChatSession = `-- name: UpdateChatSession :execresult
UPDATE chat_sessions
SET updated_at = $3, data = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type UpdateChatSessionParams struct {
	ID        int64
	UserID    int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateChatSession(ctx context.Context, arg UpdateChatSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateChatSession,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Data,
	)
}

const updateChatSessionItem = `-- name: UpdateChatSessionItem :execresult
UPDATE chat_session_items
SET updated_at = $3, type = $4, session_id = $5, data = $6
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, session_id, created_at, updated_at, type, data
`

type UpdateChatSessionItemParams struct {
	ID        int64
	UserID    int64
	UpdatedAt sql.NullTime
	Type      string
	SessionID int64
	Data      json.RawMessage
}

func (q *Queries) UpdateChatSessionItem(ctx context.Context, arg UpdateChatSessionItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateChatSessionItem,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Type,
		arg.SessionID,
		arg.Data,
	)
}

const updateDeck = `-- name: UpdateDeck :execresult
UPDATE decks
SET updated_at = $3, data = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type UpdateDeckParams struct {
	ID        int64
	UserID    int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateDeck(ctx context.Context, arg UpdateDeckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateDeck,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Data,
	)
}

const updateGameState = `-- name: UpdateGameState :execresult
UPDATE game_states
SET updated_at = $2, data = $3
WHERE id = $1
RETURNING id, created_at, updated_at, data
`

type UpdateGameStateParams struct {
	ID        int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateGameState(ctx context.Context, arg UpdateGameStateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateGameState, arg.ID, arg.UpdatedAt, arg.Data)
}

const updateIntegration = `-- name: UpdateIntegration :execresult
UPDATE integrations
SET updated_at = $2, data = $3
WHERE id = $1
RETURNING id, type, created_at, updated_at, data
`

type UpdateIntegrationParams struct {
	ID        int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateIntegration(ctx context.Context, arg UpdateIntegrationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateIntegration, arg.ID, arg.UpdatedAt, arg.Data)
}

const updateRateLimit = `-- name: UpdateRateLimit :execresult
UPDATE rate_limits
SET updated_at = $3, data = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type UpdateRateLimitParams struct {
	ID        int64
	UserID    int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateRateLimit(ctx context.Context, arg UpdateRateLimitParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateRateLimit,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Data,
	)
}

const updateSecret = `-- name: UpdateSecret :execresult
UPDATE secrets
SET updated_at = $3, data = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, created_at, updated_at, data
`

type UpdateSecretParams struct {
	ID        int64
	UserID    int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateSecret,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.Data,
	)
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users
SET updated_at = $2, data = $3
WHERE id = $1
RETURNING id, created_at, updated_at, data
`

type UpdateUserParams struct {
	ID        int64
	UpdatedAt sql.NullTime
	Data      json.RawMessage
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.ID, arg.UpdatedAt, arg.Data)
}
