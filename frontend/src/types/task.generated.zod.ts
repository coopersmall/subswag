// Generated by ts-to-zod
import { z } from 'zod'

import { chatSessionItemSchema } from './chatsession.generated.zod.ts'
import {
  userSchema,
  userDataSchema,
  userIDSchema,
} from './user.generated.zod.ts'
import {
  aPITokenSchema,
  aPITokenDataSchema,
  aPITokenIDSchema,
} from './apitoken.generated.zod.ts'
import { secretSchema, secretIDSchema } from './secret.generated.zod.ts'

export const taskIDSchema = z.number()

const taskResultIDSchema = z.number().and(
  z.object({
    taskResultID: z.literal(true),
  })
)

export const taskResultTypeSchema = z.union([
  z.literal('success'),
  z.literal('failure'),
])

export const taskResultFailureDataSchema = z.object({
  error: z.string(),
})

export const taskResultBaseSchema = z.object({
  id: taskResultIDSchema,
  type: taskResultTypeSchema,
  task_id: taskIDSchema,
  metadata: z.unknown().optional(),
})

export const taskResultSuccessDataSchema = z.object({
  result: z.unknown(),
})

export const taskResultSuccessSchema = taskResultBaseSchema
  .extend(taskResultSuccessDataSchema.shape)
  .extend({
    type: z.literal('success'),
  })

export const taskTypeSchema = z.union([
  z.literal('create_token'),
  z.literal('create_token_with_id'),
  z.literal('get_token'),
  z.literal('delete_token'),
  z.literal('answer_question'),
  z.literal('get_secret'),
  z.literal('create_secret'),
  z.literal('create_secret_with_id'),
  z.literal('update_secret'),
  z.literal('delete_secret'),
  z.literal('create_user'),
  z.literal('create_user_with_id'),
  z.literal('update_user'),
  z.literal('get_user'),
  z.literal('delete_user'),
  z.literal('answer_question'),
])

export const taskStatusSchema = z.union([
  z.literal('not_started'),
  z.literal('running'),
  z.literal('completed'),
  z.literal('failed'),
])

export const createTokenTaskDataSchema = z.object({
  user_id: userIDSchema,
  data: aPITokenDataSchema,
})

export const taskBaseSchema = z.object({
  id: taskIDSchema,
  type: taskTypeSchema,
  status: taskStatusSchema,
  metadata: z.unknown().optional(),
})

export const createTokenWithIdTaskDataSchema = z.object({
  user_id: userIDSchema,
  api_token_id: aPITokenIDSchema,
  data: aPITokenDataSchema,
})

export const createTokenWithIdTaskSchema = taskBaseSchema
  .extend(createTokenWithIdTaskDataSchema.shape)
  .extend({
    type: z.literal('create_token_with_id'),
  })

export const getTokenTaskDataSchema = z.object({
  user_id: userIDSchema,
  token_id: aPITokenIDSchema,
})

export const getTokenTaskSchema = taskBaseSchema
  .extend(getTokenTaskDataSchema.shape)
  .extend({
    type: z.literal('get_token'),
  })

export const deleteTokenTaskDataSchema = z.object({
  user_id: userIDSchema,
  token_id: aPITokenIDSchema,
})

export const deleteTokenTaskSchema = taskBaseSchema
  .extend(deleteTokenTaskDataSchema.shape)
  .extend({
    type: z.literal('delete_token'),
  })

export const answerQuestionTaskDataSchema = z.object({
  user_id: userIDSchema,
  items: z.array(chatSessionItemSchema),
})

export const answerQuestionTaskSchema = taskBaseSchema
  .extend(answerQuestionTaskDataSchema.shape)
  .extend({
    type: z.literal('answer_question'),
  })

export const getSecretTaskDataSchema = z.object({
  secret_id: secretIDSchema,
})

export const getSecretTaskSchema = taskBaseSchema
  .extend(getSecretTaskDataSchema.shape)
  .extend({
    type: z.literal('get_secret'),
  })

export const createSecretTaskDataSchema = z.object({
  user_id: userIDSchema,
  value: z.string(),
})

export const createSecretTaskSchema = taskBaseSchema
  .extend(createSecretTaskDataSchema.shape)
  .extend({
    type: z.literal('create_secret'),
  })

export const createSecretWithIdTaskDataSchema = z.object({
  user_id: userIDSchema,
  secret_id: secretIDSchema,
  value: z.string(),
})

export const createSecretWithIdTaskSchema = taskBaseSchema
  .extend(createSecretWithIdTaskDataSchema.shape)
  .extend({
    type: z.literal('create_secret_with_id'),
  })

export const updateSecretTaskDataSchema = z.object({
  user_id: userIDSchema,
  secret_id: secretIDSchema,
  value: z.string(),
})

export const updateSecretTaskSchema = taskBaseSchema
  .extend(updateSecretTaskDataSchema.shape)
  .extend({
    type: z.literal('update_secret'),
  })

export const deleteSecretTaskDataSchema = z.object({
  user_id: userIDSchema,
  secret_id: secretIDSchema,
})

export const deleteSecretTaskSchema = taskBaseSchema
  .extend(deleteSecretTaskDataSchema.shape)
  .extend({
    type: z.literal('delete_secret'),
  })

export const createUserTaskDataSchema = z.object({
  user_data: userDataSchema,
})

export const createUserTaskSchema = taskBaseSchema
  .extend(createUserTaskDataSchema.shape)
  .extend({
    type: z.literal('create_user'),
  })

export const createUserWithIdTaskDataSchema = z.object({
  user_id: userIDSchema,
  user_data: userDataSchema,
})

export const createUserWithIdTaskSchema = taskBaseSchema
  .extend(createUserWithIdTaskDataSchema.shape)
  .extend({
    type: z.literal('create_user_with_id'),
  })

export const updateUserTaskDataSchema = z.object({
  user: userSchema.optional(),
})

export const updateUserTaskSchema = taskBaseSchema
  .extend(updateUserTaskDataSchema.shape)
  .extend({
    type: z.literal('update_user'),
  })

export const getUserTaskDataSchema = z.object({
  user_id: userIDSchema,
})

export const getUserTaskSchema = taskBaseSchema
  .extend(getUserTaskDataSchema.shape)
  .extend({
    type: z.literal('get_user'),
  })

export const deleteUserTaskDataSchema = z.object({
  user_id: userIDSchema,
})

export const deleteUserTaskSchema = taskBaseSchema
  .extend(deleteUserTaskDataSchema.shape)
  .extend({
    type: z.literal('delete_user'),
  })

export const taskResultFailureSchema = taskResultBaseSchema
  .extend(taskResultFailureDataSchema.shape)
  .extend({
    type: z.literal('failure'),
  })

export const createTokenTaskSchema = taskBaseSchema
  .extend(createTokenTaskDataSchema.shape)
  .extend({
    type: z.literal('create_token'),
  })

export const taskResultSchema = z.union([
  taskResultSuccessSchema,
  taskResultFailureSchema,
])

export const taskSchema = z.union([
  createUserTaskSchema,
  createUserWithIdTaskSchema,
  updateUserTaskSchema,
  getUserTaskSchema,
  deleteUserTaskSchema,
  getSecretTaskSchema,
  createSecretTaskSchema,
  createSecretWithIdTaskSchema,
  updateSecretTaskSchema,
  deleteSecretTaskSchema,
  createTokenTaskSchema,
  createTokenWithIdTaskSchema,
  getTokenTaskSchema,
  deleteTokenTaskSchema,
  answerQuestionTaskSchema,
])
